@model LeadGen.Code.Lead.FieldItem
@{
    string fieldName = Html.NameForModel().ToString();
    int lastFieldPrefixChar = fieldName.LastIndexOf('[');
    string fieldIndex = fieldName.Substring(lastFieldPrefixChar + 1).TrimEnd(']');
    string fieldPrefix = fieldName.Substring(0, lastFieldPrefixChar);
    bool isBlank = string.IsNullOrEmpty(Model.stringValue);
    string fieldClass = "lead-field-" + @Model.code + (isBlank ? " blank" : "");
}

    <div class="lead-field @{@fieldClass;}">
        <input type="hidden" name="@{@fieldPrefix;}.index" value="@fieldIndex" />
        @Html.HiddenFor(x => x.ID)
        @Html.HiddenFor(x => x.code)
        @Html.HiddenFor(x => x.groupID)
        @Html.HiddenFor(x => x.fieldType)
        @Html.HiddenFor(x => x.name)
        @Html.HiddenFor(x => x.label)
        @Html.HiddenFor(x => x.placeholder)
        @Html.HiddenFor(x => x.taxonomyID)
        @Html.HiddenFor(x => x.termParentID)

        @{ string labelClass = "field-label";}
        @switch (Model.fieldType)
        {
            case LeadGen.Code.Lead.FieldType.Textbox:
                @Html.LabelFor(x => x.fieldText, Model.label, new { @class = labelClass })
                break;
            case LeadGen.Code.Lead.FieldType.Textarea:
                @Html.LabelFor(x => x.fieldText, Model.label, new { @class = labelClass })
                break;
            case LeadGen.Code.Lead.FieldType.Boolean:
                @Html.LabelFor(x => x.fieldBool, Model.label, new { @class = labelClass })
                break;
            case LeadGen.Code.Lead.FieldType.Datetime:
                @Html.LabelFor(x => x.fieldDatetime, Model.label, new { @class = labelClass })
                break;
            case LeadGen.Code.Lead.FieldType.Number:
                @Html.LabelFor(x => x.fieldNumber, Model.label, new { @class = labelClass })
                break;
            default:
                @Html.Label(null, Model.label, new { @class = labelClass })
                break;
        }

        @switch (Model.fieldType)
        {
            case LeadGen.Code.Lead.FieldType.Textbox:
                <div class="string-value">@Model.stringValue</div>
                @Html.HiddenFor(x => x.fieldText)
                break;
            case LeadGen.Code.Lead.FieldType.Textarea:
                <div class="string-value">@Model.stringValue</div>
                @Html.HiddenFor(x => x.fieldText)
                break;
            case LeadGen.Code.Lead.FieldType.Boolean:
                <div class="string-value">@Model.stringValue</div>
                @Html.HiddenFor(x => x.fieldBool)
                break;
            case LeadGen.Code.Lead.FieldType.Datetime:
                if (Model.fieldDatetime != null)
                {
                    <div class="string-value">@Model.fieldDatetime.Value.ToShortDateString()</div>
                }
                @Html.HiddenFor(x => x.fieldDatetime)
                break;
            case LeadGen.Code.Lead.FieldType.Number:
                <div class="string-value">@Model.stringValue</div>
                @Html.HiddenFor(x => x.fieldNumber)
                break;
            case LeadGen.Code.Lead.FieldType.Dropdown:
                var selectedDropdownTerm = Model.fieldTerms.FirstOrDefault(x => x.ID == Model.termIDSelected);
                if (selectedDropdownTerm != null)
                { @selectedDropdownTerm.name}
            @Html.HiddenFor(x => x.termIDSelected)
            break;
        case LeadGen.Code.Lead.FieldType.Checkbox:
            <div class="field-option-list">
                @for (int i = 0; i < Model.fieldTerms.Count(); i++)
                {
                    if (Model.fieldTerms[i].isChecked)
                    {
                        <div class="field-option field-option-checkbox field-option-@Model.fieldTerms[i].termURL">
                            @Html.CheckBoxFor(x => x.fieldTerms[i].isChecked, new { disabled = "disabled" })
                            @Html.LabelFor(x => x.fieldTerms[i].isChecked, Model.fieldTerms[i].name)
                        </div>
                    }
                }
            </div>
            break;
        case LeadGen.Code.Lead.FieldType.Radio:
            var selectedRadioTerm = Model.fieldTerms.FirstOrDefault(x => x.ID == Model.termIDSelected);
            if (selectedRadioTerm != null)
            {
                <div class="field-option-list">
                    @for (int i = 0; i < Model.fieldTerms.Count(); i++)
                    {
                        if (Model.fieldTerms[i].ID == Model.termIDSelected)
                        {
                            string radioId = Html.IdFor(x => x.termIDSelected) + "_" + Model.fieldTerms[i].ID;
                            <div class="field-option field-option-radio field-option-@Model.fieldTerms[i].termURL">
                                @Html.RadioButtonFor(x => x.termIDSelected, Model.fieldTerms[i].ID, new { id = radioId, disabled = "disabled" })
                                @Html.Label("termIDSelected_" + Model.fieldTerms[i].ID, Model.fieldTerms[i].name)
                            </div>
                        }
                    }
                </div>
            }
            @Html.HiddenFor(x => x.termIDSelected)
            break;
        default:
            break;
    }
        @if (Model.fieldTerms != null)
        {
            for (int i = 0; i < Model.fieldTerms.Count(); i++)
            {
                @Html.HiddenFor(x => x.fieldTerms[i].ID)
                @Html.HiddenFor(x => x.fieldTerms[i].name)
                @Html.HiddenFor(x => x.fieldTerms[i].termURL)
                @Html.HiddenFor(x => x.fieldTerms[i].isChecked)
            }
        }
    </div>

