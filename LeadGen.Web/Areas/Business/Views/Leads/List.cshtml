@model X.PagedList.IPagedList<LeadGen.Code.Lead.LeadItem>
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Common
@using LeadGen.Code.Lead

@{
    ViewBag.Title = "Leads";
    BusinessDetails.Status status = ViewBag.status;
    long? leadID = ViewBag.leadID;
    DateTime? publishedFrom = ViewBag.publishedFrom;
    DateTime? publishedTo = ViewBag.publishedTo;
    string query = ViewBag.query;
}

<style>
    td.leadIdentity {
        width: 180px;
    }
    td.leadActions {
        text-align: center;
        width: 245px;
    }
        td.leadActions .contacts {
            text-align: left;
        }
        td.leadActions .action {
            margin-bottom: 10px;
        }
            td.leadActions .action.set_interested, .action.set_not_interested {
                text-align: right;
            }




    .lead_field {
        margin-bottom: 5px;
    }

        .lead_field span.grey, .leadActions span.grey {
            color: gray;
        }
</style>

<h2>Leads</h2>
<hr />


<div class="row search-orders" style="margin-top:10px;">
    @using (Html.BeginForm("List", "Leads", FormMethod.Get, null))
    {
        @Html.Hidden("status", status)
        @Html.Hidden("searchInit", true);
        <div class="col-sm-1 form-group">
            @Html.Label("leadID", "Lead #")
            @Html.TextBox("leadID", leadID, new { data_val = "false", @class = "form-control", placeholder = "#" })
        </div>
        <div class="col-sm-3  form-group">
            @Html.Label("publishedFrom", "From")
            @Html.TextBox("publishedFrom", publishedFrom, new { data_val = "false", @class = "form-control datetimepicker", placeholder = DateTime.Today.AddYears(-1).ToShortDateString() })
        </div>
        <div class="col-sm-3  form-group">
            @Html.Label("publishedTo", "To")
            @Html.TextBox("publishedTo", publishedTo, new { data_val = "false", @class = "form-control datetimepicker", placeholder = DateTime.Today.ToShortDateString() })
        </div>
        <div class="col-sm-4  form-group">
            @Html.Label("query", "Search")
            @Html.TextBox("query", query, new { data_val = "false", @class = "form-control", placeholder = "Material, Comment, Email ..." })
        </div>
        <div class="col-sm-1  form-group">
            @Html.Label("", "submit", new { style = "visibility: hidden;" })
            <input type="submit" class="btn btn-primary" value="Search">
        </div>
    }
</div>

<ul class="nav nav-tabs nav-orders" style="margin-top:10px;">
    <li role='presentation' class='@(status == BusinessDetails.Status.All ? "active" : "")'>
        @Html.ActionLink(BusinessDetails.statusDictionary[BusinessDetails.Status.All], "List", new
        {
            status = BusinessDetails.Status.All,
            leadID = leadID,
            publishedFrom = publishedFrom.ToString(),
            publishedTo = publishedTo.ToString(),
            query = query
        })
    </li>
    <li role='presentation' class='@(status == BusinessDetails.Status.NewForBusiness ? "active" : "")'>
        @Html.ActionLink(BusinessDetails.statusDictionary[BusinessDetails.Status.NewForBusiness], "List", new
        {
            status = BusinessDetails.Status.NewForBusiness,
            leadID = leadID,
            publishedFrom = publishedFrom.ToString(),
            publishedTo = publishedTo.ToString(),
            query = query
        })
    </li>
    <li role='presentation' class='@((status == BusinessDetails.Status.ContactReceived || status == BusinessDetails.Status.Important) ? "active" : "")'>
        @Html.ActionLink(BusinessDetails.statusDictionary[BusinessDetails.Status.ContactReceived], "List", new
        {
            status = BusinessDetails.Status.ContactReceived,
            leadID = leadID,
            publishedFrom = publishedFrom.ToString(),
            publishedTo = publishedTo.ToString(),
            query = query
        })
    </li>
    <li role='presentation' class='@(status == BusinessDetails.Status.Completed ? "active" : "")'>
        @Html.ActionLink(BusinessDetails.statusDictionary[BusinessDetails.Status.Completed], "List", new
        {
            status = BusinessDetails.Status.Completed,
            leadID = leadID,
            publishedFrom = publishedFrom.ToString(),
            publishedTo = publishedTo.ToString(),
            query = query
        })
    </li>
    <li role='presentation' class='@(status == BusinessDetails.Status.NotInterested ? "active" : "") pull-right'>
        @Html.ActionLink(BusinessDetails.statusDictionary[BusinessDetails.Status.NotInterested], "List", new
        {
            status = BusinessDetails.Status.NotInterested,
            leadID = leadID,
            publishedFrom = publishedFrom.ToString(),
            publishedTo = publishedTo.ToString(),
            query = query
        })
    </li>
</ul>


@switch (status)
{
    case BusinessDetails.Status.NewForBusiness:
        await Html.RenderPartialAsync("LeadLists/_NewForBusiness", Model);
        break;
    case BusinessDetails.Status.Completed:
        await Html.RenderPartialAsync("LeadLists/_Completed", Model);
        break;
    case BusinessDetails.Status.Important:
        await Html.RenderPartialAsync("LeadLists/_ContactReceived", Model);
        break;
    case BusinessDetails.Status.ContactReceived:
        await Html.RenderPartialAsync("LeadLists/_ContactReceived", Model);
        break;
    default:
        await Html.RenderPartialAsync("LeadLists/_All", Model);
        break;
}

@Html.PagedListPager(Model,
    page => Url.Action("List", new
    {
        page,
        status = status,
        leadID = leadID,
        publishedFrom = publishedFrom.ToString(),
        publishedTo = publishedTo.ToString(),
        query = query
    }),
    new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, ContainerDivClasses = new string[] { "text-center" } }
)