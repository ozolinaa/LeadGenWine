@model LeadGen.Code.Lead.LeadItem
@{
    string formID = "LeadConfirationForm";
    int groupIndex = 0;
    int fieldIndex = 0;
}
@using (Ajax.BeginForm("Confirm", null, null,
    new AjaxOptions {
        UpdateTargetId = formID,
        InsertionMode = InsertionMode.ReplaceWith,
        LoadingElementId = "LoadingWindowSplash"
    },
    new { @class = "form-horizontal", id = formID }))
{
    @Html.EditorFor(x => x.fieldGroups)

    <h1 class="title">Пожалуйста проверьте заявку</h1>

    <div class="wanna" style="background:none;">
        <div class="container">
            @{
                groupIndex = Model.fieldGroups.FindIndex(x => x.code == "comments");
                fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "shape");
                if (Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Where(x => x.isChecked).Any())
                {
                    <h3 class="title">Форма памятника</h3>
                    <div class="color list">
                        @for (int i = 0; i < Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Count(); i++)
                        {
                            var term = Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms[i];
                            if (term.isChecked)
                            {
                                string imageSrc = string.Format("/Content/themes/izgpam/order/shape/{0}.jpg", term.termURL);
                                <div class="item">
                                    <label>
                                        <img src="@imageSrc" alt="@term.name" title="@term.name" />
                                        <span class="text">@term.name</span>
                                    </label>
                                </div>
                            }
                        }
                    </div>
                }
                //Need to render DisplayFor the field because as it renders some required fields
                <div style="display:none;">
                    @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                </div>
            }

            @{
                //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "comments");
                fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "material");
                if (Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Where(x => x.isChecked).Any())
                {
                    <h3 class="title">Материалы/цвет</h3>
                    <div class="color list">
                        @for (int i = 0; i < Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Count(); i++)
                        {
                            var term = Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms[i];
                            if (term.isChecked)
                            {
                                string imageSrc = string.Format("/Content/themes/izgpam/order/material/{0}.jpg", term.termURL);
                                <div class="item">
                                    <label>
                                        <span class="pic">
                                            <img src="@imageSrc" alt="@term.name" title="@term.name" />
                                        </span>
                                        <span class="text">@term.name</span>
                                    </label>
                                </div>
                            }
                        }
                    </div>
                }
                //Need to render DisplayFor the field because as it renders some required fields
                <div style="display:none;">
                    @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                </div>
            }

            @{
                //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "comments");
                fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "accessories");
                if (Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Where(x => x.isChecked).Any())
                {
                    <h3 class="title">Аксессуары оформления надгробия</h3>
                    <div class="color list">
                        @for (int i = 0; i < Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms.Count(); i++)
                        {
                            var term = Model.fieldGroups[groupIndex].fields[fieldIndex].fieldTerms[i];
                            if (term.isChecked)
                            {
                                string imageSrc = string.Format("/Content/themes/izgpam/order/accessories/{0}.jpg", term.termURL);
                                <div class="item">
                                    <label>
                                        <img src="@imageSrc" alt="@term.name" class="img-q" title="@term.name" />
                                        <span class="text">@term.name</span>
                                    </label>
                                </div>
                            }
                        }
                    </div>
                }
                //Need to render DisplayFor the field because as it renders some required fields
                <div style="display:none;">
                    @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                </div>


                fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "pamName");
                <h3 class="title">Кому Памятник</h3>
                <h4 class="title">@Model.fieldGroups[groupIndex].fields[fieldIndex].fieldText</h4>
                <div style="display:none;">
                    @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                </div>

                fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "comments");
                if (string.IsNullOrEmpty(Model.fieldGroups[groupIndex].fields[fieldIndex].fieldText) == false)
                {
                    <h3 class="title">Пожелания к заказу</h3>
                    <h4 class="title">@Model.fieldGroups[groupIndex].fields[fieldIndex].fieldText</h4>
                    <div style="display:none;">
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                    </div>
                }


                <h3 class="title">Условия заказа и уставновки</h3>

                <div class="row">
                    <div class="col-sm-6">
                        @{
                            groupIndex = Model.fieldGroups.FindIndex(x => x.code == "terms");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "city");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])

                            //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "terms");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "cemetery");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])

                            //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "terms");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "installationRequired");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                        }

                    </div>
                    <div class="col-sm-6">
                        @{
                            //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "terms");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "businessType");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])

                            //groupIndex = Model.fieldGroups.FindIndex(x => x.code == "terms");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "price");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])

                            groupIndex = Model.fieldGroups.FindIndex(x => x.code == "dates");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "executeDate");
                        @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                        }
                    </div>
                </div>

                <h3 class="title">Контакты</h3>

                <div class="row">
                    <div class="col-sm-6">
                        @{
                            groupIndex = Model.fieldGroups.FindIndex(x => x.code == "contacts");
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "name");
                            @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex], new { label = "Как к Вам обратиться" })

                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "phone");
                            @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])

                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "phoneIsAvailableForBusiness");
                            @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                        }
                    </div>
                    <div class="col-sm-6">
                        @{
                            fieldIndex = Model.fieldGroups[groupIndex].fields.FindIndex(x => x.code == "contactComment");
                            @Html.DisplayFor(x => x.fieldGroups[groupIndex].fields[fieldIndex])
                        }

                        <div class="form-group">
                            @Html.LabelFor(x => x.email, "E-mail", new { @class = "col-sm-6 control-label" })
                            <div class="col-sm-6">
                                @Model.email
                                @Html.HiddenFor(x => x.email)
                            </div>
                        </div>

                    </div>
                </div>
            }





        </div>
    </div>

    <div class="send">

        <div>
            <div class="terms">
                @Html.CheckBox("AgreeWithSystemTerms", false)
                @Html.Label("AgreeWithSystemTerms", "Соглашаюсь с тем, что гранитные мастерские моего региона могут видеть мою заявку, получить указанные мной контакты для связи и сделать мне коммерческие предложения.", new { @class = "" })
                @Html.ValidationMessage("AgreeWithSystemTerms")
            </div>
        </div>

        <div>
            @Html.Hidden("GoBackToOrder", false, new { id = "GoBackToOrder" })
            <div class="col-xs-4">
                <input type="submit" class="input-button input-button-default" onclick="$('#GoBackToOrder').val('True')" value="Изменить заявку">
            </div>
            <div class="col-xs-8">
                <input type="submit" value="Подтвердить заявку" class="input-button" />
                <p style="margin-top:10px;">На Ваш e-mail будет отправлена ссылка на подтверждение, после чего мастерским будет доступна Ваша заявка.</p>
            </div>
        </div>

    </div>



                            }
