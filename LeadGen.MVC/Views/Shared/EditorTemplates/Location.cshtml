@model LeadGen.Code.Map.Location
@using System.Configuration;
@{
    string googleMapsAPIKey = ConfigurationManager.AppSettings["GoogleMapsAPIKey"];
    string mapID = "map_"+Guid.NewGuid().ToString().Replace('-', '_');
}

<div class="row location-meta-fiels">
    <div class="col-sm-6">
        @Html.HiddenFor(x => x.lat, new { data_lat =  mapID })
        @Html.HiddenFor(x => x.lng, new { data_lng = mapID })
        @Html.HiddenFor(x => x.zoom, new { data_zoom = mapID })

        @Html.LabelFor(x => x.name)
        @Html.TextBoxFor(x => x.name, new { @class = "form-control locationName", data_name = mapID })
    </div>
    <div class="col-sm-6">
        @Html.LabelFor(x => x.address)
        @Html.TextBoxFor(x => x.address, new { @class = "form-control locationAddress", data_address = mapID })
    </div>
</div>

<div class="lg-map-wrapper">
    <input id="pac-input_@mapID" class="controls pac-input" type="text" placeholder="Search location">
    <div id="@mapID" class="lg-map"></div>
</div>


<script>
    (function () {
        var LeadGen = window.LeadGen || (window.LeadGen = {});
        var settings = LeadGen.settings || (LeadGen.settings = {});
        settings.googleMapsAPIKey = "@googleMapsAPIKey";
        var googleMaps = LeadGen.googleMaps || (LeadGen.googleMaps = {});
        var googleMap = {
            id: "@mapID"
        };

        googleMaps[googleMap.id] = googleMap;

        googleMap.instance = null;

        googleMap.init = function() {
            var center = {lat: @Model.lat, lng: @Model.lng};
            var map = new google.maps.Map(document.getElementById(googleMap.id), {
                zoom: @Model.zoom,
                center:center,
            });
            map.initialCenter = center;
            //Make the map availeble from global scope
            googleMap.instance = map;

            var input = (document.getElementById('pac-input_@mapID'));

            var types = document.getElementById('type-selector');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29),
                draggable:true,
                visible:true,
                position:{lat: @Model.lat, lng: @Model.lng}
            });


            autocomplete.addListener('place_changed', function() {
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    var locationError = "Location was not found";
                    if(bootbox) {
                        bootbox.alert(locationError);
                    } else {
                        window.alert(locationError);
                    }
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(16);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                $('[data-name="'+googleMap.id+'"]').val(place.name);
                $('[data-address="'+googleMap.id+'"]').val(address);

                updateMarkerLocationFields(marker);
            });

            google.maps.event.addListener(marker, 'dragend', function() { updateMarkerLocationFields(marker); } );

            map.addListener('zoom_changed', function() {
                $('[data-zoom="'+googleMap.id+'"]').val(map.getZoom());
            });


            function updateMarkerLocationFields(marker){
                $('[data-lat="'+googleMap.id+'"]').val(marker.getPosition().lat());
                $('[data-lng="'+googleMap.id+'"]').val(marker.getPosition().lng());
            }

        }

    })();

</script>